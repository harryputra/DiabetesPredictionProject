# -*- coding: utf-8 -*-
"""DiabetesPredictionProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yBxgr5SNgCEeMSQSyDk6q2mgKYhKPc1s

# Diabetes Prediction Project

**Proyek ini bertujuan untuk memprediksi kemungkinan seseorang menderita diabetes berdasarkan data medis.**
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Upload data
from google.colab import files
files.upload()  # Upload file kaggle.json

!mkdir ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d iammustafatz/diabetes-prediction-dataset

import zipfile
with zipfile.ZipFile('diabetes-prediction-dataset.zip', 'r') as zip_ref:
    zip_ref.extractall('diabetes_dataset')

!ls diabetes_dataset

"""# Step 1: Data Loading"""

print("Loading dataset...")
df = pd.read_csv('diabetes_dataset/diabetes_prediction_dataset.csv')

"""# Step 2: Data Understanding"""

print("\nDataset Information:")
print(df.info())
print("\nDataset Description:")
print(df.describe())

"""# Visualizing the distribution of target variable"""

sns.countplot(df['diabetes'])
plt.title("Distribution of Target Variable (Diabetes)")
plt.show()

"""# Visualizing numerical features"""

df.hist(figsize=(12, 10), bins=20)
plt.tight_layout()
plt.show()

"""# Step 3: Data Preparation"""

print("\nPreparing the data...")

"""# Encoding categorical variables"""

le = LabelEncoder()
df['gender'] = le.fit_transform(df['gender'])  # Female -> 0, Male -> 1
df['smoking_history'] = le.fit_transform(df['smoking_history'])  # Encode smoking history

"""# Normalizing numerical features"""

scaler = StandardScaler()
numerical_features = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

"""
# Splitting the data into training and testing sets"""

X = df.drop('diabetes', axis=1)
y = df['diabetes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Step 4: Modeling"""

print("\nTraining the model...")
model = LogisticRegression()
model.fit(X_train, y_train)

"""# Step 5: Evaluation"""

print("\nEvaluating the model...")
y_pred = model.predict(X_test)

"""# Accuracy"""

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

"""# Classification report"""

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""# Confusion Matrix"""

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print("\nProject Completed Successfully!")